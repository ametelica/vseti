<?php
global $user, $owner;

if($owner->group_info['group_country_id'] > 0) {
	$country = array($owner->group_info['group_country_id'], get_country_name($owner->group_info['group_country_id']));
} else {
	$country = array();
}

if($owner->group_info['group_city_id'] > 0) {
	$city = array($owner->group_info['group_city_id'], get_city_name($owner->group_info['group_city_id']));
} else {
	$city = array();
}

?>var sourceType = 0;
var geocodeProvider = 'yandex';
box.setOptions({
  width: 570,
  bodyStyle: 'padding: 0',
  onClean: function() {
    cur.placeMap.removeMap();
    if (cur.placeType) {
      cur.placeType.destroy();
    }
    cur.placeCountry.destroy();
    cur.placeCity.destroy();
    //cur.placeStreet.destroy();
    //cur.placeHouse.destroy();
    cur.placeAddress.destroy();
  }
});
box.setButtons('Сохранить', function() {
  if (isVisible(curBox().progress)) {
    return;
  }
  var query = {
    act: 'save_group_place',
    gid: cur.gid,
    hash: '<?=hash_get($user->id, 18, 'spl')?>'
  }, fields = cur.placeValidate();
  if (!fields) return;

  ajax.post('al_page.php', extend(query, fields), {
    onDone: function(res) {
      curBox().hide();
      GroupsEdit.onPlaceSave(res);
    },
    progress: curBox().progress
  });
});

extend(cur, {
  placeMap: false,
  placeMarker: false,
  placeProvider: false,
  placeSelData: {"type":1,"types":[],"countries":[[3,"<b>Беларусь<\/b>"],[1,"Россия"],[2,"Украина"]],"cities":[[282,"<b>Минск<\/b>"],[538,"Барановичи"],[281,"Брест"],[244,"Витебск"],[392,"Гомель"],[2179,"Горки"],[649,"Гродно"],[467,"Могилев"],[375,"Мозырь"],[1299,"Новополоцк"],[610,"Пинск"],[1107,"Бобруйск"]],"place_id":"<?=intval($var['pl_id'])?>","country":<?=jenc($country)?>,"city":<?=jenc($city)?>,"street":{"city":"<?=intval($owner->group_info['group_city_id'])?>","completed_streets":1,"completed_schools":1,"completed_universities":1}},
  placeProviders: {"default":"mapbox","yandex":[1,2,3]},
  placeLat: <?=empty($var['pl_lat']) ? 0 : $var['pl_lat'] ?>,
  placeLng: <?=empty($var['pl_lng']) ? 0 : $var['pl_lng'] ?>,
  placeFailsLevel: 0,
  placeUpdatingMap: false,
  onCenterSet: function() {
    curBox().hideProgress();
    cur.placeUpdatingMap = false;
    ++cur.placeFailsLevel;
    if (cur.placeFailsLevel) {
      cur.placeUpdateMap();
    }
  },
  placeInit: function(api) {
    cur.placeMap.setOptions({
      enableScrollWheelZoom: true
    });
    cur.placeMap.addLargeControls();
    vsMaps.load(geocodeProvider, function() {
      cur.placeGeocoder = new vsMaps.Geocoder(geocodeProvider, cur.placeUpdateMapCb, cur.onCenterSet);
    });
    curBox().hideProgress();
    cur.placeUpdateMap();
  },
  placeSelectProvider: function(country) {
    var i, provider = false;
    //TEMP
    //return 'yandex';
    for (i in cur.placeProviders) {
      if (isArray(cur.placeProviders[i]) && inArray(country, cur.placeProviders[i])) {
        provider = i;
        break;
      }
    }
    if (provider === false) {
      provider = cur.placeProviders['default'];
    }
    return provider;
  },
  placeInitProvider: function(country) {
    var i, cp,
    provider = cur.placeSelectProvider(country),
    map_id = 'place_map_' + provider;
    curBox().showProgress();
    cur.placeProvider = provider;
    for (i in cur.placeProviders) {
      cp = cur.placeProviders[i];
      if (i != provider && isArray(cp) && isVisible('place_map_' + cp)) {
        hide('place_map_' + cp);
      }
      if (!isVisible('place_map_' + provider)) {
        show(map_id);
      }
    }
    cur.placeMap = new vsMaps.VSMap(map_id, provider);
    if (cur.placeMap.isLoaded(provider)) {
      cur.placeInit(provider);
    } else {
      cur.placeMap.load.addHandler(function() {
        cur.placeInit(cur.placeProvider);
      });
    }
  },
  placeSwapProvider: function(country) {
    var provider = cur.placeSelectProvider(country);
    if (cur.placeProvider != provider && typeof cur.placeMap == 'object') {
      cur.placeProvider = provider;
      if (cur.placeMarker !== false) {
        cur.placeMap.removeMarker(cur.placeMarker);
      }
      cur.placeMap.swap('place_map_' + provider, provider);
      /*cur.placeMap.load.addHandler(function() {
        cur.placeGeocoder.swap(provider);
      });*/
    }
  },
  placeUpdateMap: function (v, edit) {
    var address = [], region, city, i, isLoaded;

    if (cur.placeUpdatingMap) {
      return false;
    }
    cur.placeUpdatingMap = true;

    cur.placeGeoData.country = intval(cur.placeCountry.val());
    if (cur.placeGeoData.country > 0) {
      address.push(cur.placeCountry.val_full()[1]);
    } else {
      cur.placeUpdatingMap = false;
      return false;
    }
    cur.placeGeoData.city = intval(cur.placeCity.val());
    if (cur.placeGeoData.city > 0) {
      city = cur.placeCity.val_full();
      if (!city[2]) {
        address.push(city[1]);
      } else {
        region = city[2].split(',');
        address.push(region[0] + ', ' + city[1]);
      }
    }

    if (intval(cur.placeAddress.val()) > 0) {
      cur.placeGeoData.street = cur.placeAddress.val_full()[1];
    } else if (cur.placeAddress.val() == -1) {
      cur.placeGeoData.street = cur.placeAddress.customVal();
    } else {
      cur.placeGeoData.street = '';
    }
    if (cur.placeGeoData.street) {
      address.push(cur.placeGeoData.street);
    }

    if (cur.placeFailsLevel > 0) {
      if (cur.placeFailsLevel >= address.length) {
        address = ['Russia'];
        cur.placeFailsLevel = -1;
      } else {
        address = address.slice(0, address.length - cur.placeFailsLevel);
      }
    }
    address.reverse();
    address = address.join(', ');
    address = address.replace(/<\/?[^>]+>/g, '');

    curBox().showProgress();
    cur.placeSwapProvider(cur.placeGeoData.country);
    if (cur.placeMap.isLoaded(cur.placeProvider)) {
      if (cur.placeLat && cur.placeLng && !edit) {
        var placePoint = new vsMaps.LatLonPoint(cur.placeLat, cur.placeLng);
        cur.placeMap.setCenterAndZoom(placePoint, 14);
        cur.onCenterSet();
        cur.placeUpdateMapCb({point: placePoint});
      } else {
        cur.placeGeocoder.geocode({address: address});
      }
    } else {
      cur.placeMap.load.addHandler(function() {
        cur.placeUpdatingMap = false;
        cur.placeUpdateMap();
      });
    }
  },
  placeUpdateMapCb: function(result) {
    cur.placeFailsLevel = 0;
    var data;
    if (result.bounds) {
      cur.placeMap.setBounds(result.bounds);
    }
    if (cur.placeMarker !== false) {
      debugLog('removing marker');
      cur.placeMap.removeMarker(cur.placeMarker);
    }
    cur.placeMarker = new vsMaps.Marker(result.point);
    cur.placeMap.addMarkerWithData(cur.placeMarker, {
      draggable: true,
      infoBubble: false,
      icon: '/images/map/move.png',
      iconSize: [33, 32],
      iconAnchor: [16, 32]
    });
    cur.placeUpdatingMap = false;
    curBox().hideProgress();
  },
  placeValidate: function() {
    var query = {}, error = false, result;
    query.title = trim(ge('place_title').value);
    query.type = intval(cur.placeGeoData.type);
    query.country = intval(cur.placeGeoData.country);
    query.city = intval(cur.placeGeoData.city);
    query.address = trim(cur.placeGeoData.street);
    if (cur.placeMarker) {
      query.lat = cur.placeMarker.location.lat;
      query.lng = cur.placeMarker.location.lon;
    } else {
      return false;
    }
    return query;
  }
});
selectsData.setCountries(cur.placeSelData.countries);
if (cur.placeSelData.country) {
  selectsData.setCities(cur.placeSelData.country[0], cur.placeSelData.cities);
}
if(cur.placeSelData.city) {
  selectsData.setCityInfo(cur.placeSelData.city[0], cur.placeSelData.street);
}

extend(cur, {
  placeGeoData: {
    type: intval(cur.placeSelData.type),
    country: cur.placeSelData.country ? intval(cur.placeSelData.country[0]) : 1,
    city: cur.placeSelData.city ? intval(cur.placeSelData.city[0]) : 0,
    street: '',
    house: ''
  }
});
if (ge('place_type')) {
  extend(cur, {
    placeType: new Dropdown(ge('place_type'), cur.placeSelData.types, {
      width: 208,
      height: 250,
      big: 1,
      onChange: function(val) {
        cur.placeGeoData.type = intval(val);
      }
    })
  });
}

var address = ge('place_address').value;
extend(cur, {
  placeAddress: new StreetSelect(ge('place_address'), ge('address_row'), {
    width: 208,
    forceEnableCustom: 1,
    noBlur: true,
    big: 1
  })
});
extend(cur, {
  placeCity: new CitySelect(ge('place_city'), ge('city_row'), {
    width: 208,
    streetSelect: cur.placeAddress,
    big: 1
  })
});
extend(cur, {
  placeCountry: new CountrySelect(ge('place_country'), ge('country_row'), {
    width: 208,
    citySelect: cur.placeCity,
    full_list: getLang('select_country_full_list'),
    big: 1
  })
});

if (cur.placeType) cur.placeType.val(cur.placeGeoData.type, true);
cur.placeCountry.val(cur.placeGeoData.country, true);
cur.placeCity.val(cur.placeGeoData.city, true);

cur.placeCountry.setOptions({onChange: function(v) {
  cur.placeUpdateMap(v, true);
}});
cur.placeCity.setOptions({onChange: function(v) {
  cur.placeUpdateMap(v, true);
}});
cur.placeAddress.setOptions({onChange: function(v) {
  cur.placeUpdateMap(v, true);
}});

if (address) {
  cur.placeAddress.val(address);
} else {
  cur.placeAddress.val('');
}

cur.placeInitProvider(cur.placeSelData.country[0]);