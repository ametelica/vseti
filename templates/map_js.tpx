<?php
global $user_points;
?>
var api_key = '5597851674';

var map = new L.Map('map',{});
var belarus = new L.TileLayer('http://tile.map.by/'+api_key+'/mapnik/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org" title="openstreetmap.org">Openstreetmap.org</a>, 2012 &copy; <a href="http://map.by" title="map.by">Map.by</a>',
    maxZoom: 18,
    minZoom: 7,
    unloadInvisibleTiles: true
});

map.addLayer(belarus).setView(new L.LatLng(53.9004949, 27.5595474), 1);

var markerGroup = new L.LayerGroup();
map.addLayer(markerGroup);

var userPoints = [];


L.UserPopup = L.Class.extend({
    includes: L.Mixin.Events,

    options: {
        minWidth: 40,
        maxWidth: 50,
        autoPan: true,
        closeButton: true,
        offset: new L.Point(0, 2),
        autoPanPadding: new L.Point(5, 5),
        className: '',
        zIndex: 1
    },

    initialize: function (options, source) {
        L.Util.setOptions(this, options);

        this._source = source;
    },

    onAdd: function (map) {
        this._map = map;
        if (!this._container) {
            this._initLayout();
        }
        this._updateContent();

        this._container.style.opacity = '0';

        this._map._panes.markerPane.appendChild(this._container);
        this._map.on('viewreset', this._updatePosition, this);

        if (this._map.options.closePopupOnClick) {
            this._map.on('preclick', this._close, this);
        }

        this._update();

        this._container.style.opacity = '1'; //TODO fix ugly opacity hack

        this._opened = true;

    },

    onRemove: function (map) {
        map._panes.markerPane.removeChild(this._container);
        L.Util.falseFn(this._container.offsetWidth);

        map.off('viewreset', this._updatePosition, this);
        map.off('click', this._close, this);

        this._container.style.opacity = '0';

        this._opened = false;
    },

    setLatLng: function (latlng) {
        this._latlng = latlng;
        if (this._opened) {
            this._update();
        }
        return this;
    },

    setContent: function (content) {
        this._content = content;
        if (this._opened) {
            this._update();
        }
        return this;
    },

    _close: function () {
        if (this._opened) {
            this._map.closePopup();
        }
    },

    _initLayout: function () {
        this._container = L.DomUtil.create('div', 'leaflet-user-popup ' + this.options.className);

        if (this.options.closeButton) {
            this._closeButton = L.DomUtil.create('a', 'leaflet-popup-close-button', this._container);
            this._closeButton.href = '#close';
            L.DomEvent.addListener(this._closeButton, 'click', this._onCloseButtonClick, this);
        }

        this._wrapper = L.DomUtil.create('div', 'leaflet-popup-content-wrapper', this._container);
        L.DomEvent.disableClickPropagation(this._wrapper);
        this._contentNode = L.DomUtil.create('div', 'leaflet-custom-popup-content', this._wrapper);

        //this._tipContainer = L.DomUtil.create('div', 'leaflet-popup-tip-container', this._container);
        //this._tip = L.DomUtil.create('div', 'leaflet-popup-tip', this._tipContainer);
    },

    _update: function () {
        this._container.style.visibility = 'hidden';

        this._updateContent();
        this._updateLayout();
        this._updatePosition();

        this._container.style.visibility = '';

        this._adjustPan();
    },

    _updateContent: function () {
        if (!this._content) {
            return;
        }

        if (typeof this._content === 'string') {
            this._contentNode.innerHTML = this._content;
        } else {
            this._contentNode.innerHTML = '';
            this._contentNode.appendChild(this._content);
        }
    },

    _updateLayout: function () {
        this._container.style.width = '';
        this._container.style.whiteSpace = 'nowrap';
        this._container.style.zIndex = this.options.zIndex;

        var width = this._container.offsetWidth;

        this._container.style.width = (width > this.options.maxWidth ?
            this.options.maxWidth : (width < this.options.minWidth ? this.options.minWidth : width)) + 'px';
        this._container.style.whiteSpace = '';

        this._containerWidth = this._container.offsetWidth;
    },

    _updatePosition: function () {
        var pos = this._map.latLngToLayerPoint(this._latlng);

        this._containerBottom = -pos.y - this.options.offset.y;
        this._containerLeft = pos.x - Math.round(this._containerWidth / 2) + this.options.offset.x;

        this._container.style.bottom = this._containerBottom + 'px';
        this._container.style.left = this._containerLeft + 'px';
    },

    _adjustPan: function () {
        if (!this.options.autoPan) {
            return;
        }

        var containerHeight = this._container.offsetHeight,
            layerPos = new L.Point(
                this._containerLeft,
                -containerHeight - this._containerBottom),
            containerPos = this._map.layerPointToContainerPoint(layerPos),
            adjustOffset = new L.Point(0, 0),
            padding = this.options.autoPanPadding,
            size = this._map.getSize();

        if (containerPos.x < 0) {
            adjustOffset.x = containerPos.x - padding.x;
        }
        if (containerPos.x + this._containerWidth > size.x) {
            adjustOffset.x = containerPos.x + this._containerWidth - size.x + padding.x;
        }
        if (containerPos.y < 0) {
            adjustOffset.y = containerPos.y - padding.y;
        }
        if (containerPos.y + containerHeight > size.y) {
            adjustOffset.y = containerPos.y + containerHeight - size.y + padding.y;
        }

        if (adjustOffset.x || adjustOffset.y) {
            this._map.panBy(adjustOffset);
        }
    },

    _onCloseButtonClick: function (e) {
        this._close();
        L.DomEvent.stop(e);
    }
});

L.Marker.include({
    bindUserPopup: function (content, options) {
        var pnt = this.options.icon.popupAnchor;
        pnt.y = 20;
        pnt.x = 38;
        options = L.Util.extend({offset: this.options.icon.popupAnchor, zIndex: ($(this._icon.outerHTML).css('z-index')-1)}, options);
        if (!this._popup) {
            this.on('mouseover', this.openUserPopup, this);
        }
        this._popup = new L.UserPopup(options, this);
        this._popup.setContent(content);
        return this;
    },

    openUserPopup: function () {
        this._popup.setLatLng(this._latlng);
        this._popup.initialize({zIndex: ($(this._icon.outerHTML).css('z-index')-1)}, this);
        if (this._map) {
            this._map.openPopup(this._popup);
        }
        return this;
    }
});

function viewUserMarkers(){
    //console.log(map.getZoom());
    
    var pDone = function(responce) { 
        
        var userPoints = responce.users 
        markerGroup.clearLayers();
        
        for(var i in userPoints){
            if(typeof(userPoints[i].coord.y) == 'undefined')
                continue;

            var lifeIcon = L.Icon.extend({
                iconUrl: userPoints[i].photo,
                shadowUrl: 'modem_shadow.png',
                iconSize: new L.Point(40, 40),
                shadowSize: new L.Point(40, 44),
                iconAnchor: new L.Point(20, 22),
                popupAnchor: new L.Point(0, 0)
            });

            var marker = new L.Marker(new L.LatLng(userPoints[i].coord.y, userPoints[i].coord.x), {icon: new lifeIcon()});
            markerGroup.addLayer(marker);
            //marker.on('click',function(){window.location = userPoints[i].link;});
            marker.bindUserPopup('<div class="life-popup" style="width: 120px; height: 42px;"><a href="'+userPoints[i].link+'" target="_blank"><div class="street">'+userPoints[i].name+'<br />'+ userPoints[i].lastname +'</div></a><div class="phone">'+userPoints[i].age+'</div></div>',
                { maxWidth: 120, closeButton: false }
            );
            
        }
    };
    
    var coords = map.getCenter();
    $.getJSON('/map.php?act=a_nearest_users&z=' + map.getZoom() + '&x=' + coords.lat + '&y=' + coords.lng + '&r=' + Math.random(), null, pDone);
    
}

viewUserMarkers();

function ddd1(e){
    console.log(e.latlng.lat+ ' ' + e.latlng.lng + ' ' + map.getZoom());
}

map.on('zoomend', viewUserMarkers);
map.on('moveend', viewUserMarkers);
//map.on('click', ddd1);
